import type { NextApiRequest, NextApiResponse } from 'next';
import { ValidationError, handleApiError, validateMethod, validateRequiredFields } from '@/lib/error-handler';
import { withRateLimit, extractRateLimiter } from '@/lib/rate-limiter';
import { incrementCounter, logError } from '@/lib/admin-stats';
import { CoverLetterExport } from '@/lib/cover-letter-types';
import { logger } from '@/lib/secure-logger';
import { PerformanceMonitor } from '@/lib/performance-monitor';

// HTML template for styled export
const getHTMLTemplate = (content: string, styling: string = 'professional') => {
  const styles = {
    professional: `
      body { font-family: 'Times New Roman', serif; max-width: 800px; margin: 0 auto; padding: 40px; line-height: 1.6; color: #333; }
      .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
      .content { white-space: pre-wrap; text-align: justify; }
      .date { text-align: right; margin-bottom: 30px; }
      .signature { margin-top: 40px; }
    `,
    modern: `
      body { font-family: 'Arial', sans-serif; max-width: 800px; margin: 0 auto; padding: 40px; line-height: 1.7; color: #2c3e50; }
      .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; margin-bottom: 30px; border-radius: 10px; }
      .content { white-space: pre-wrap; text-align: justify; }
      .date { text-align: right; margin-bottom: 30px; font-style: italic; }
      .signature { margin-top: 40px; border-top: 1px solid #eee; padding-top: 20px; }
    `,
    minimal: `
      body { font-family: 'Helvetica', sans-serif; max-width: 700px; margin: 0 auto; padding: 30px; line-height: 1.8; color: #444; }
      .header { margin-bottom: 40px; }
      .content { white-space: pre-wrap; text-align: left; }
      .date { margin-bottom: 20px; color: #666; }
      .signature { margin-top: 30px; }
    `
  };

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Cover Letter</title>
      <style>${styles[styling as keyof typeof styles] || styles.professional}</style>
    </head>
    <body>
      <div class="date">${new Date().toLocaleDateString()}</div>
      <div class="content">${content.replace(/\n/g, '<br>')}</div>
      <div class="signature">
        <p>Sincerely,<br>
        [Your Name]</p>
      </div>
    </body>
    </html>
  `;
};

// LaTeX template for professional export
const getLaTeXTemplate = (content: string, metadata: { companyName?: string; jobTitle?: string }) => {
  return `
\\documentclass[11pt,a4paper]{letter}
\\usepackage[utf8]{inputenc}
\\usepackage[margin=1in]{geometry}
\\usepackage{times}

\\signature{[Your Name]}
\\address{[Your Address] \\\\ [City, State ZIP] \\\\ [Your Email] \\\\ [Your Phone]}
\\date{\\today}

\\begin{document}

\\begin{letter}{Hiring Manager \\\\ ${metadata.companyName} \\\\ [Company Address]}

\\opening{Dear Hiring Manager,}

${content.replace(/\n/g, '\n\n')}

\\closing{Sincerely,}

\\end{letter}

\\end{document}
  `;
};

// PDF generation using HTML (would require puppeteer or similar in production)
async function generatePDF(content: string, styling: string): Promise<Buffer> {
  // Mock PDF generation - in production, use puppeteer or similar
  const htmlContent = getHTMLTemplate(content, styling);
  
  // For now, return HTML as buffer
  return Buffer.from(htmlContent, 'utf8');
}

// DOCX generation (would require docx library in production)
async function generateDOCX(content: string): Promise<Buffer> {
  // Mock DOCX generation - in production, use docx library
  const docxContent = `
Cover Letter
============

${content}

---
Generated by Resumify AI
  `;
  
  return Buffer.from(docxContent, 'utf8');
}

async function exportHandler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const timer = PerformanceMonitor.startTiming('cover-letter-export');
  
  try {
    validateMethod(req, ['POST']);
    const { content, format, styling = 'professional', metadata } = req.body;

    // Validate required fields
    validateRequiredFields(req.body, ['content', 'format']);
    
    // Validate types and values
    if (typeof content !== 'string') {
      throw new ValidationError('Content must be a string');
    }

    if (!['pdf', 'docx', 'txt', 'html', 'latex'].includes(format)) {
      throw new ValidationError('Invalid format. Must be one of: pdf, docx, txt, html, latex');
    }

    if (styling && !['professional', 'modern', 'minimal'].includes(styling)) {
      throw new ValidationError('Invalid styling. Must be one of: professional, modern, minimal');
    }

    logger.info('Cover letter export started', { format, styling });

    let fileBuffer: Buffer;
    let contentType: string;
    let filename: string;

    switch (format) {
      case 'pdf':
        fileBuffer = await generatePDF(content, styling);
        contentType = 'application/pdf';
        filename = `cover-letter-${metadata?.companyName || 'export'}.pdf`;
        break;

      case 'docx':
        fileBuffer = await generateDOCX(content);
        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
        filename = `cover-letter-${metadata?.companyName || 'export'}.docx`;
        break;

      case 'html':
        fileBuffer = Buffer.from(getHTMLTemplate(content, styling), 'utf8');
        contentType = 'text/html';
        filename = `cover-letter-${metadata?.companyName || 'export'}.html`;
        break;

      case 'latex':
        fileBuffer = Buffer.from(getLaTeXTemplate(content, metadata), 'utf8');
        contentType = 'application/x-latex';
        filename = `cover-letter-${metadata?.companyName || 'export'}.tex`;
        break;

      case 'txt':
      default:
        fileBuffer = Buffer.from(content, 'utf8');
        contentType = 'text/plain';
        filename = `cover-letter-${metadata?.companyName || 'export'}.txt`;
        break;
    }

    // Set response headers
    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', fileBuffer.length);

    // Track export
    // await incrementCounter('coverLetterExports'); // TODO: Add to admin stats

    timer.end(true, { format, styling, fileSize: fileBuffer.length });
    logger.info('Cover letter export completed successfully', { format });
    
    return res.status(200).send(fileBuffer);

  } catch (error) {
    timer.end(false, { error: error instanceof Error ? error.message : String(error) });
    await handleApiError(error, req, res, 'Cover letter export');
  }
}

// Apply rate limiting
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const rateLimitMiddleware = withRateLimit(extractRateLimiter);
  
  await rateLimitMiddleware(req, res, async () => {
    await exportHandler(req, res);
  });
}